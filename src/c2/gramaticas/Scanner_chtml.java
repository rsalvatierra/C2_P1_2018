/* The following code was generated by JFlex 1.6.1 */

package c2.gramaticas;
import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/c2/gramaticas/flex_chtml.jflex</tt>
 */
public class Scanner_chtml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 34,  2, 35, 34, 34,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    33,  0,  1,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0, 13, 31,  0, 
    30, 30, 30, 30, 30, 30, 30, 30, 30, 30,  0,  0,  3, 25,  9,  0, 
     0, 15, 16,  4, 18, 14, 10, 26,  5, 28, 23, 27,  8,  7, 12, 19, 
    21, 27, 22, 29,  6, 20, 27, 27, 27, 27, 17,  0,  0,  0,  0,  0, 
     0, 15, 16,  4, 18, 14, 10, 26,  5, 28, 23, 27,  8,  7, 12, 19, 
    21, 27, 22, 29,  6, 20, 27, 27, 27, 27, 17,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\2\2\1\1\4\2\1\3\2\1\1\0"+
    "\1\4\5\0\1\2\1\0\5\2\11\0\1\2\1\5"+
    "\1\2\1\0\4\2\1\6\3\0\1\7\4\0\2\2"+
    "\1\0\4\2\1\10\6\0\1\2\1\11\1\0\2\2"+
    "\1\12\1\2\11\0\1\13\1\0\1\2\1\14\1\15"+
    "\1\16\1\17\11\0\1\20\1\0\1\2\1\21\3\0"+
    "\1\22\5\0\1\2\1\23\6\0\1\24\6\0\1\25"+
    "\3\0\1\26\2\0\1\27\1\0\1\30\1\31\3\0"+
    "\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01b0\0\u01d4\0\110"+
    "\0\44\0\u01f8\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0"+
    "\0\u02f4\0\u0318\0\u033c\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0"+
    "\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\44"+
    "\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\44\0\u05e8"+
    "\0\u060c\0\u0630\0\44\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4"+
    "\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\44\0\u07e0"+
    "\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\44\0\u08dc"+
    "\0\u0900\0\u0924\0\44\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8"+
    "\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\44\0\u0ab0\0\u0ad4"+
    "\0\44\0\44\0\44\0\44\0\u0af8\0\u0b1c\0\u0b40\0\u0b64"+
    "\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\44\0\u0c3c\0\u0c60"+
    "\0\44\0\u0c84\0\u0ca8\0\u0ccc\0\44\0\u0cf0\0\u0d14\0\u0d38"+
    "\0\u0d5c\0\u0d80\0\u0da4\0\44\0\u0dc8\0\u0dec\0\u0e10\0\u0e34"+
    "\0\u0e58\0\u0e7c\0\44\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30"+
    "\0\u0f54\0\44\0\u0f78\0\u0f9c\0\u0fc0\0\44\0\u0fe4\0\u1008"+
    "\0\44\0\u102c\0\44\0\44\0\u1050\0\u1074\0\u1098\0\44";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\5\6\1\2\1\7\1\10"+
    "\1\6\1\2\1\6\1\11\6\6\1\12\1\6\2\2"+
    "\1\13\1\6\1\14\1\6\1\15\1\16\1\17\2\4"+
    "\45\0\1\20\1\21\1\0\41\20\2\0\1\4\36\0"+
    "\2\4\5\0\1\22\1\0\1\23\3\0\1\24\3\0"+
    "\1\25\6\0\1\26\22\0\5\6\1\0\1\6\1\0"+
    "\1\6\1\0\12\6\2\0\5\6\11\0\5\6\1\0"+
    "\1\6\1\0\1\6\1\0\5\6\1\27\4\6\2\0"+
    "\5\6\27\0\1\30\25\0\4\6\1\31\1\0\1\6"+
    "\1\0\1\32\1\0\12\6\2\0\5\6\11\0\5\6"+
    "\1\0\1\6\1\0\1\6\1\0\6\6\1\33\3\6"+
    "\2\0\5\6\11\0\5\6\1\0\1\6\1\0\1\6"+
    "\1\0\10\6\1\34\1\6\2\0\5\6\11\0\5\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\35\5\6"+
    "\2\0\5\6\43\0\1\15\11\0\5\36\1\0\1\36"+
    "\1\0\1\36\1\0\12\36\2\0\4\36\3\0\1\36"+
    "\6\0\1\37\1\40\16\0\1\41\2\0\1\42\27\0"+
    "\1\43\20\0\1\43\22\0\1\44\20\0\1\44\23\0"+
    "\1\45\46\0\1\46\30\0\5\6\1\0\1\6\1\0"+
    "\1\47\1\0\12\6\2\0\5\6\36\0\1\50\16\0"+
    "\2\6\1\51\2\6\1\0\1\6\1\52\1\6\1\0"+
    "\12\6\2\0\2\6\1\53\2\6\11\0\1\54\4\6"+
    "\1\0\1\6\1\0\1\6\1\0\12\6\2\0\5\6"+
    "\11\0\2\6\1\55\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\12\6\2\0\5\6\11\0\5\6\1\0\1\6"+
    "\1\0\1\6\1\0\6\6\1\56\3\6\2\0\5\6"+
    "\11\0\5\6\1\0\1\6\1\0\1\6\1\0\12\6"+
    "\1\0\1\50\5\6\45\0\1\57\33\0\1\60\4\0"+
    "\1\60\14\0\1\61\53\0\1\62\55\0\1\63\4\0"+
    "\1\63\14\0\1\64\51\0\1\65\33\0\1\66\53\0"+
    "\1\67\33\0\5\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\70\5\6\2\0\5\6\11\0\5\6\1\0"+
    "\1\6\1\0\1\6\1\0\5\6\1\71\4\6\2\0"+
    "\5\6\21\0\1\72\33\0\5\6\1\0\1\6\1\0"+
    "\1\73\1\0\12\6\2\0\5\6\11\0\1\6\1\74"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\12\6\2\0"+
    "\5\6\11\0\5\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\75\10\6\2\0\5\6\11\0\5\6\1\0"+
    "\1\6\1\0\1\6\1\0\7\6\1\76\2\6\2\0"+
    "\5\6\35\0\1\77\4\0\1\77\15\0\1\100\62\0"+
    "\1\101\41\0\1\102\34\0\1\103\45\0\1\104\42\0"+
    "\1\105\31\0\5\6\1\0\1\6\1\0\1\6\1\0"+
    "\5\6\1\106\4\6\2\0\5\6\11\0\5\6\1\0"+
    "\1\6\1\0\1\6\1\0\12\6\1\0\1\107\5\6"+
    "\23\0\1\110\31\0\5\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\111\11\6\2\0\5\6\11\0\5\6\1\0"+
    "\1\6\1\0\1\6\1\0\5\6\1\112\4\6\2\0"+
    "\5\6\11\0\5\6\1\0\1\6\1\0\1\6\1\0"+
    "\12\6\1\0\1\113\5\6\11\0\5\6\1\0\1\6"+
    "\1\0\1\6\1\0\5\6\1\114\4\6\2\0\5\6"+
    "\15\0\1\115\60\0\1\116\26\0\1\117\37\0\1\120"+
    "\1\0\1\121\7\0\1\122\6\0\1\123\36\0\1\124"+
    "\33\0\1\125\37\0\5\6\1\0\1\6\1\0\1\6"+
    "\1\0\12\6\1\0\1\126\5\6\24\0\1\127\30\0"+
    "\5\6\1\0\1\6\1\0\1\6\1\0\1\6\1\130"+
    "\10\6\2\0\5\6\11\0\5\6\1\0\1\6\1\0"+
    "\1\6\1\0\12\6\1\0\1\131\5\6\11\0\5\6"+
    "\1\0\1\6\1\0\1\6\1\0\12\6\1\0\1\132"+
    "\5\6\16\0\1\133\55\0\1\134\43\0\1\135\24\0"+
    "\1\136\1\137\16\0\1\140\2\0\1\141\27\0\1\142"+
    "\20\0\1\142\23\0\1\143\46\0\1\144\42\0\1\145"+
    "\36\0\1\146\54\0\1\147\25\0\5\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\150\5\6\2\0\5\6"+
    "\16\0\1\151\62\0\1\152\4\0\1\152\14\0\1\153"+
    "\53\0\1\154\55\0\1\155\4\0\1\155\14\0\1\156"+
    "\41\0\1\157\53\0\1\160\50\0\1\161\45\0\1\162"+
    "\24\0\5\6\1\0\1\6\1\0\1\6\1\0\5\6"+
    "\1\163\4\6\2\0\5\6\35\0\1\164\4\0\1\164"+
    "\15\0\1\165\62\0\1\166\41\0\1\167\36\0\1\170"+
    "\42\0\1\171\44\0\1\172\55\0\1\173\16\0\5\6"+
    "\1\0\1\6\1\0\1\6\1\0\12\6\1\0\1\173"+
    "\5\6\15\0\1\174\60\0\1\175\26\0\1\176\53\0"+
    "\1\177\33\0\1\200\55\0\1\201\32\0\1\202\55\0"+
    "\1\203\43\0\1\204\36\0\1\205\36\0\1\206\55\0"+
    "\1\207\43\0\1\210\31\0\1\211\53\0\1\212\33\0"+
    "\1\213\43\0\1\214\51\0\1\215\46\0\1\216\44\0"+
    "\1\217\31\0\1\220\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4284];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\0\1\11\5\0\1\1\1\0"+
    "\5\1\11\0\1\1\1\11\1\1\1\0\4\1\1\11"+
    "\3\0\1\11\4\0\2\1\1\0\4\1\1\11\6\0"+
    "\1\1\1\11\1\0\2\1\1\11\1\1\11\0\1\11"+
    "\1\0\1\1\4\11\11\0\1\11\1\0\1\1\1\11"+
    "\3\0\1\11\5\0\1\1\1\11\6\0\1\11\6\0"+
    "\1\11\3\0\1\11\2\0\1\11\1\0\2\11\3\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public void imprimir(String lqv)
{
    System.out.println("token leído\t"+lqv);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner_chtml(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos_chtml.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 27: break;
          case 2: 
            { imprimir("id");return new Symbol(Simbolos_chtml.id2, yychar, yyline, yytext());
            }
          case 28: break;
          case 3: 
            { imprimir("num");return new Symbol(Simbolos_chtml.num, yychar, yyline, yytext());
            }
          case 29: break;
          case 4: 
            { imprimir("cadena");return new Symbol(Simbolos_chtml.cadena, yychar, yyline, yytext());
            }
          case 30: break;
          case 5: 
            { imprimir("id");return new Symbol(Simbolos_chtml.id, yychar, yyline, yytext());
            }
          case 31: break;
          case 6: 
            { imprimir("caracter");return new Symbol(Simbolos_chtml.caracter, yychar, yyline, yytext());
            }
          case 32: break;
          case 7: 
            { imprimir("<CJS");return new Symbol(Simbolos_chtml.cjso, yychar, yyline, yytext());
            }
          case 33: break;
          case 8: 
            { imprimir("<CCSS");return new Symbol(Simbolos_chtml.ccsso, yychar, yyline, yytext());
            }
          case 34: break;
          case 9: 
            { imprimir("alto");return new Symbol(Simbolos_chtml.alto, yychar, yyline, yytext());
            }
          case 35: break;
          case 10: 
            { imprimir("ruta");return new Symbol(Simbolos_chtml.ruta, yychar, yyline, yytext());
            }
          case 36: break;
          case 11: 
            { imprimir("fondo");return new Symbol(Simbolos_chtml.fondo, yychar, yyline, yytext());
            }
          case 37: break;
          case 12: 
            { imprimir("ancho");return new Symbol(Simbolos_chtml.ancho, yychar, yyline, yytext());
            }
          case 38: break;
          case 13: 
            { imprimir("grupo");return new Symbol(Simbolos_chtml.grupo, yychar, yyline, yytext());
            }
          case 39: break;
          case 14: 
            { imprimir("<CHTML>");return new Symbol(Simbolos_chtml.chtmlo, yychar, yyline, yytext());
            }
          case 40: break;
          case 15: 
            { imprimir("<CUERPO");return new Symbol(Simbolos_chtml.bodyo, yychar, yyline, yytext());
            }
          case 41: break;
          case 16: 
            { imprimir("<PANEL>");return new Symbol(Simbolos_chtml.panelo, yychar, yyline, yytext());
            }
          case 42: break;
          case 17: 
            { imprimir("<TITULO>");return new Symbol(Simbolos_chtml.tituloo, yychar, yyline, yytext());
            }
          case 43: break;
          case 18: 
            { imprimir("<FIN-CJS");return new Symbol(Simbolos_chtml.cjsc, yychar, yyline, yytext());
            }
          case 44: break;
          case 19: 
            { imprimir("<FIN-CCSS");return new Symbol(Simbolos_chtml.ccssc, yychar, yyline, yytext());
            }
          case 45: break;
          case 20: 
            { imprimir("alineado");return new Symbol(Simbolos_chtml.alineado, yychar, yyline, yytext());
            }
          case 46: break;
          case 21: 
            { imprimir("<FIN-CHTML>");return new Symbol(Simbolos_chtml.chtmlc, yychar, yyline, yytext());
            }
          case 47: break;
          case 22: 
            { imprimir("<FIN-PANEL>");return new Symbol(Simbolos_chtml.panelc, yychar, yyline, yytext());
            }
          case 48: break;
          case 23: 
            { imprimir("<FIN-TITULO>");return new Symbol(Simbolos_chtml.tituloc, yychar, yyline, yytext());
            }
          case 49: break;
          case 24: 
            { imprimir("<ENCABEZADO>");return new Symbol(Simbolos_chtml.heado, yychar, yyline, yytext());
            }
          case 50: break;
          case 25: 
            { imprimir("<FIN-CUERPO>");return new Symbol(Simbolos_chtml.bodyc, yychar, yyline, yytext());
            }
          case 51: break;
          case 26: 
            { imprimir("<FIN-ENCABEZADO>");return new Symbol(Simbolos_chtml.headc, yychar, yyline, yytext());
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
