/* The following code was generated by JFlex 1.6.1 */

package c2.gramaticas;
import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/c2/gramaticas/flex_ccss.jflex</tt>
 */
public class Scanner_ccss implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  7, 47,  8,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     8,  0,  5,  0,  0,  0,  0,  0, 44, 45, 10, 40, 46, 36,  3,  9, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 41, 43,  0, 42,  0,  0, 
     0, 15, 37, 25, 22, 12, 30, 33, 26, 21, 27,  1, 11, 18, 16, 19, 
    35, 24, 14, 29, 13, 17, 32,  1, 31, 34, 23, 39,  0, 38,  0,  4, 
     0, 15, 37, 25, 22, 12, 30, 33, 26, 21, 27,  1, 11, 18, 16, 19, 
    35, 24, 14, 29, 13, 17, 32,  1, 31, 34, 23,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\6\2\1\1\10\2\1\7\1\2\1\10\1\11\1\12"+
    "\1\1\1\13\1\14\1\15\1\16\1\2\1\3\1\0"+
    "\1\17\1\4\1\0\10\2\1\0\2\2\1\20\1\0"+
    "\1\20\13\2\1\0\3\2\1\21\2\4\4\0\4\2"+
    "\1\0\4\2\1\0\2\2\1\0\7\2\1\0\5\2"+
    "\1\0\3\2\3\0\1\4\2\2\1\22\1\2\1\0"+
    "\4\2\1\0\2\2\1\0\3\2\1\0\1\2\1\0"+
    "\2\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0"+
    "\3\2\2\0\1\23\1\24\1\2\1\0\2\2\1\0"+
    "\1\2\1\0\1\2\1\0\2\2\1\0\3\2\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\1\0\1\2\2\25"+
    "\2\2\1\0\1\2\1\0\1\2\1\26\1\27\2\0"+
    "\1\30\1\0\2\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\31\1\0\3\2\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\32\1\2\1\0\1\2\2\33\1\2"+
    "\1\0\1\2\1\0\1\2\1\34\1\2\1\0\1\2"+
    "\2\35\2\36\1\0\1\2\2\37\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\40\1\0\1\2\1\0\1\2"+
    "\1\0\2\2\2\41\1\0\1\2\2\42\2\43\2\44"+
    "\1\45\1\46\1\0\1\2\1\0\2\2\1\0\1\2"+
    "\2\47\1\0\2\2\1\0\1\2\2\50\1\2\1\0"+
    "\2\2\1\0\1\2\1\51\1\0\1\2\2\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\60"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\60"+
    "\0\u0420\0\60\0\60\0\60\0\u0450\0\60\0\60\0\60"+
    "\0\60\0\u0480\0\u04b0\0\300\0\60\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\60\0\u0750\0\140\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\60\0\u0a50\0\60\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00"+
    "\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u0ae0\0\u1170\0\u11a0\0\140"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\140\0\140\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40"+
    "\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0"+
    "\0\u1bf0\0\u1c20\0\u1c50\0\60\0\140\0\u1c80\0\u1cb0\0\u1ce0"+
    "\0\u1d10\0\u1d40\0\u1d70\0\140\0\140\0\u1da0\0\u1dd0\0\140"+
    "\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50"+
    "\0\u1f80\0\140\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0"+
    "\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220"+
    "\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0"+
    "\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520"+
    "\0\u2550\0\140\0\u2580\0\u25b0\0\u25e0\0\60\0\140\0\u2610"+
    "\0\u2640\0\u2670\0\u26a0\0\u26d0\0\140\0\u2700\0\u2730\0\u2760"+
    "\0\60\0\140\0\60\0\140\0\u2790\0\u27c0\0\60\0\140"+
    "\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0\0\140\0\u2910"+
    "\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30\0\60\0\140"+
    "\0\u2a60\0\u2a90\0\60\0\140\0\60\0\140\0\60\0\140"+
    "\0\60\0\140\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0"+
    "\0\u2be0\0\60\0\140\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0"+
    "\0\60\0\140\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\u2dc0\0\u2df0"+
    "\0\140\0\u2e20\0\u2e50\0\60\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\3\6\1\7\1\10"+
    "\1\11\1\3\1\12\1\3\1\13\1\14\1\3\1\15"+
    "\1\16\1\17\1\20\1\21\2\3\1\22\1\23\1\24"+
    "\1\2\1\3\1\25\1\3\1\26\1\27\2\3\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\2\1\36\1\37"+
    "\1\40\1\41\62\0\1\3\1\42\1\0\1\3\6\0"+
    "\11\3\1\0\7\3\1\0\7\3\1\0\1\3\14\0"+
    "\1\4\1\43\54\0\5\44\1\45\52\44\6\0\3\6"+
    "\60\0\1\46\1\47\46\0\1\3\1\42\1\0\1\3"+
    "\6\0\1\3\1\50\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\1\3\1\51\1\3\1\52\1\53\4\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\1\54\5\3\1\55\2\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\1\3\1\56\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\4\3\1\57\4\3\1\60\1\61\6\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\11\3\1\0\7\3\1\0\6\3\1\62\1\0"+
    "\1\3\40\0\1\63\1\64\31\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\1\3\1\65\1\66\4\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\1\3\1\67\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\1\3\1\70\2\3\1\71\1\3\1\72\1\3"+
    "\1\73\1\0\7\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\10\3\1\74\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\6\3\1\75\2\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\4\3\1\76\3\3\1\77\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\1\3\1\100\7\3\1\101\1\102\6\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\3\3\1\103\5\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\10\3\1\104\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\64\0\1\105\6\0\1\3\1\42\2\3\6\0"+
    "\11\3\1\0\7\3\1\0\7\3\1\0\1\3\14\0"+
    "\1\43\63\0\1\106\1\107\3\0\1\110\4\0\1\111"+
    "\37\0\12\112\1\113\45\112\1\0\1\3\1\42\1\0"+
    "\1\3\6\0\2\3\1\114\6\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\11\3\1\0\7\3\1\0\2\3\1\115\4\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\6\3\1\116\2\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\7\3"+
    "\1\117\1\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\11\3\1\120"+
    "\1\121\6\3\1\0\7\3\1\0\1\3\13\0\1\3"+
    "\1\42\1\0\1\3\6\0\2\3\1\122\6\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\0\7\3\1\0\4\3"+
    "\1\123\2\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\7\3\1\0\5\3\1\124"+
    "\1\3\1\0\1\3\32\0\1\125\40\0\1\3\1\42"+
    "\1\0\1\3\6\0\5\3\1\126\3\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\4\3\1\127\4\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\42\0\1\130\30\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\0\3\3\1\131\3\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\3\3\1\132\5\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\5\3\1\133\3\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\11\3\1\0\7\3\1\0\6\3\1\134\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\3\3\1\135"+
    "\5\3\1\0\7\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\1\136\10\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\3\3\1\137\5\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\7\3\1\140\1\141\6\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\1\142\10\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\3\3\1\143"+
    "\1\3\1\144\3\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\3\3"+
    "\1\145\5\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\46\0\2\146\23\0\1\3\1\42\1\0\1\3\6\0"+
    "\11\3\1\0\7\3\1\146\1\147\6\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\6\3\1\150"+
    "\2\3\1\0\7\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\3\3\1\151\5\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\21\0\1\107"+
    "\64\0\1\152\64\0\1\153\36\0\12\112\1\154\56\112"+
    "\1\155\1\154\45\112\1\0\1\3\1\42\1\0\1\3"+
    "\6\0\3\3\1\156\5\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\2\3\1\157\6\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\1\3"+
    "\1\160\7\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\2\3\1\161"+
    "\6\3\1\0\7\3\1\0\7\3\1\0\1\3\32\0"+
    "\1\162\40\0\1\3\1\42\1\0\1\3\6\0\5\3"+
    "\1\163\3\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\10\3\1\164"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\13\0\1\3"+
    "\1\42\1\0\1\3\6\0\3\3\1\165\5\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\6\3\1\166\2\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\33\0\1\167\37\0\1\3"+
    "\1\42\1\0\1\3\6\0\6\3\1\170\2\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\0\3\3\1\171\3\3"+
    "\1\0\7\3\1\0\1\3\33\0\1\172\37\0\1\3"+
    "\1\42\1\0\1\3\6\0\6\3\1\173\2\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\1\3\1\174\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\2\3\1\175\6\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\11\3\1\176\1\177\6\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\0\7\3\1\200\1\201\6\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\10\3\1\202\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\203\1\204\6\3\1\0"+
    "\7\3\1\0\1\3\27\0\1\205\43\0\1\3\1\42"+
    "\1\0\1\3\6\0\2\3\1\206\6\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\7\3\1\207\1\210\6\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\7\3\1\211\1\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\0\1\3\1\212\5\3\1\0\7\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\2\3\1\213"+
    "\6\3\1\0\7\3\1\0\7\3\1\0\1\3\36\0"+
    "\2\214\33\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\214\1\215\6\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\11\3\1\0\7\3"+
    "\1\0\6\3\1\216\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\0\1\3\1\217\5\3"+
    "\1\0\7\3\1\0\1\3\27\0\1\220\64\0\1\221"+
    "\35\0\11\112\1\107\1\154\45\112\1\0\1\3\1\42"+
    "\1\0\1\3\6\0\4\3\1\222\4\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\10\3\1\223\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\1\3\1\224\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\26\0\1\225\44\0\1\3\1\42\1\0\1\3"+
    "\6\0\1\3\1\226\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\3\3\1\227\5\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\230\1\231\6\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\11\3\1\0\7\3"+
    "\1\232\1\233\6\3\1\0\1\3\46\0\2\234\23\0"+
    "\1\3\1\42\1\0\1\3\6\0\11\3\1\0\7\3"+
    "\1\234\1\235\6\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\6\3\1\236\2\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\36\0\2\237\33\0\1\3"+
    "\1\42\1\0\1\3\6\0\11\3\1\237\1\240\6\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\4\3\1\241\2\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\3\3\1\242\5\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\27\0\1\243\43\0\1\3\1\42\1\0"+
    "\1\3\6\0\2\3\1\244\6\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\36\0\2\245\33\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\245\1\246\6\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\3\3\1\247\5\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\41\0\1\250\31\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\2\3\1\251\4\3\1\0"+
    "\7\3\1\0\1\3\36\0\2\252\33\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\252\1\253\6\3\1\0"+
    "\7\3\1\0\1\3\26\0\1\254\44\0\1\3\1\42"+
    "\1\0\1\3\6\0\1\3\1\255\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\4\3\1\256\4\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\10\3\1\257\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\260\1\261\6\3\1\0\7\3\1\0\1\3\57\0"+
    "\1\262\13\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\263\13\0\1\3"+
    "\1\42\1\0\1\3\6\0\10\3\1\264\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\1\3\1\265\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\30\0\1\266\55\0\1\267\44\0"+
    "\1\3\1\42\1\0\1\3\6\0\11\3\1\0\7\3"+
    "\1\0\2\3\1\270\4\3\1\0\1\3\31\0\1\271"+
    "\41\0\1\3\1\42\1\0\1\3\6\0\4\3\1\272"+
    "\4\3\1\0\7\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\1\3\1\273\7\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\25\0\1\274"+
    "\45\0\1\3\1\42\1\0\1\3\6\0\1\275\10\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\43\0\1\276"+
    "\27\0\1\3\1\42\1\0\1\3\6\0\11\3\1\0"+
    "\4\3\1\277\2\3\1\0\7\3\1\0\1\3\43\0"+
    "\1\300\27\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\0\4\3\1\301\2\3\1\0\7\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\1\3\1\302"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\1\3\26\0"+
    "\1\303\44\0\1\3\1\42\1\0\1\3\6\0\1\3"+
    "\1\304\7\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\11\3\1\0"+
    "\5\3\1\305\1\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\4\3\1\306\4\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\31\0\1\307"+
    "\41\0\1\3\1\42\1\0\1\3\6\0\4\3\1\310"+
    "\4\3\1\0\7\3\1\0\7\3\1\0\1\3\52\0"+
    "\1\311\20\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\0\7\3\1\0\3\3\1\312\3\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\2\3\1\313"+
    "\6\3\1\0\7\3\1\0\7\3\1\0\1\3\35\0"+
    "\1\314\35\0\1\3\1\42\1\0\1\3\6\0\10\3"+
    "\1\315\1\0\7\3\1\0\7\3\1\0\1\3\50\0"+
    "\1\316\22\0\1\3\1\42\1\0\1\3\6\0\11\3"+
    "\1\0\7\3\1\0\1\3\1\317\5\3\1\0\1\3"+
    "\13\0\1\3\1\42\1\0\1\3\6\0\2\3\1\320"+
    "\6\3\1\0\7\3\1\0\7\3\1\0\1\3\13\0"+
    "\1\3\1\42\1\0\1\3\6\0\1\3\1\321\7\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\43\0\1\322"+
    "\27\0\1\3\1\42\1\0\1\3\6\0\11\3\1\0"+
    "\4\3\1\323\2\3\1\0\7\3\1\0\1\3\25\0"+
    "\1\324\45\0\1\3\1\42\1\0\1\3\6\0\1\325"+
    "\10\3\1\0\7\3\1\0\7\3\1\0\1\3\31\0"+
    "\1\46\56\0\1\326\67\0\1\327\32\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\0\1\3\1\330\5\3"+
    "\1\0\7\3\1\0\1\3\13\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\1\3\1\331\5\3\1\0"+
    "\7\3\1\0\1\3\25\0\1\332\45\0\1\3\1\42"+
    "\1\0\1\3\6\0\1\333\10\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\33\0\1\334\37\0\1\3\1\42"+
    "\1\0\1\3\6\0\6\3\1\335\2\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\33\0\1\336\37\0\1\3"+
    "\1\42\1\0\1\3\6\0\6\3\1\337\2\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\30\0\1\340\42\0"+
    "\1\3\1\42\1\0\1\3\6\0\3\3\1\341\5\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\13\0\1\3"+
    "\1\42\1\0\1\3\6\0\4\3\1\342\4\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\0\1\3\1\343\5\3"+
    "\1\0\7\3\1\0\1\3\25\0\1\344\45\0\1\3"+
    "\1\42\1\0\1\3\6\0\1\345\10\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\31\0\1\346\41\0\1\3"+
    "\1\42\1\0\1\3\6\0\4\3\1\347\4\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\1\3\1\350\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\32\0\1\351\40\0\1\3"+
    "\1\42\1\0\1\3\6\0\5\3\1\352\3\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\36\0\2\353\33\0"+
    "\1\3\1\42\1\0\1\3\6\0\11\3\1\353\1\354"+
    "\6\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\10\3\1\355\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\1\356\10\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\31\0\1\357\41\0\1\3\1\42\1\0\1\3"+
    "\6\0\4\3\1\360\4\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\26\0\1\361\44\0\1\3\1\42\1\0"+
    "\1\3\6\0\1\3\1\362\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\35\0\1\46\57\0\1\363\35\0"+
    "\1\3\1\42\1\0\1\3\6\0\10\3\1\364\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\365\1\366\6\3\1\0"+
    "\7\3\1\0\1\3\31\0\1\367\41\0\1\3\1\42"+
    "\1\0\1\3\6\0\4\3\1\370\4\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\25\0\1\371\45\0\1\3"+
    "\1\42\1\0\1\3\6\0\1\372\10\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\25\0\1\373\45\0\1\3"+
    "\1\42\1\0\1\3\6\0\1\374\10\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\40\0\1\375\32\0\1\3"+
    "\1\42\1\0\1\3\6\0\11\3\1\0\1\3\1\376"+
    "\5\3\1\0\7\3\1\0\1\3\13\0\1\3\1\42"+
    "\1\0\1\3\6\0\10\3\1\377\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\56\0\1\u0100\14\0\1\3\1\42"+
    "\1\0\1\3\6\0\11\3\1\0\7\3\1\0\7\3"+
    "\1\u0100\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\11\3\1\0\7\3\1\0\2\3\1\u0101\4\3\1\0"+
    "\1\3\27\0\1\u0102\43\0\1\3\1\42\1\0\1\3"+
    "\6\0\2\3\1\u0103\6\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\43\0\1\u0104\27\0\1\3\1\42\1\0"+
    "\1\3\6\0\11\3\1\0\4\3\1\u0105\2\3\1\0"+
    "\7\3\1\0\1\3\13\0\1\3\1\42\1\0\1\3"+
    "\6\0\1\3\1\u0106\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\25\0\1\u0107\45\0\1\3\1\42\1\0"+
    "\1\3\6\0\1\u0108\10\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\34\0\1\u0109\36\0\1\3\1\42\1\0"+
    "\1\3\6\0\7\3\1\u010a\1\3\1\0\7\3\1\0"+
    "\7\3\1\0\1\3\31\0\1\u010b\41\0\1\3\1\42"+
    "\1\0\1\3\6\0\4\3\1\u010c\4\3\1\0\7\3"+
    "\1\0\7\3\1\0\1\3\31\0\1\u010d\41\0\1\3"+
    "\1\42\1\0\1\3\6\0\4\3\1\u010e\4\3\1\0"+
    "\7\3\1\0\7\3\1\0\1\3\31\0\1\u010f\41\0"+
    "\1\3\1\42\1\0\1\3\6\0\4\3\1\u0110\4\3"+
    "\1\0\7\3\1\0\7\3\1\0\1\3\27\0\1\u0111"+
    "\43\0\1\3\1\42\1\0\1\3\6\0\2\3\1\u0112"+
    "\6\3\1\0\7\3\1\0\7\3\1\0\1\3\31\0"+
    "\1\u0113\41\0\1\3\1\42\1\0\1\3\6\0\4\3"+
    "\1\u0114\4\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\31\0\1\u0115\41\0\1\3\1\42\1\0\1\3\6\0"+
    "\4\3\1\u0116\4\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\7\3"+
    "\1\u0117\1\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\26\0\1\u0118\44\0\1\3\1\42\1\0\1\3\6\0"+
    "\1\3\1\u0119\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\25\0\1\u011a\45\0\1\3\1\42\1\0\1\3"+
    "\6\0\1\u011b\10\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\40\0\1\u011c\32\0\1\3\1\42\1\0\1\3"+
    "\6\0\11\3\1\0\1\3\1\u011d\5\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\1\3\1\u011e\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\32\0\1\u011f\40\0\1\3\1\42\1\0\1\3"+
    "\6\0\5\3\1\u0120\3\3\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\35\0\1\u0121\35\0\1\3\1\42\1\0"+
    "\1\3\6\0\10\3\1\u0122\1\0\7\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\5\3\1\u0123\3\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\43\0\1\u0124\27\0\1\3\1\42\1\0\1\3"+
    "\6\0\11\3\1\0\4\3\1\u0125\2\3\1\0\7\3"+
    "\1\0\1\3\13\0\1\3\1\42\1\0\1\3\6\0"+
    "\2\3\1\u0126\6\3\1\0\7\3\1\0\7\3\1\0"+
    "\1\3\36\0\2\u0127\33\0\1\3\1\42\1\0\1\3"+
    "\6\0\11\3\1\u0127\1\u0128\6\3\1\0\7\3\1\0"+
    "\1\3\13\0\1\3\1\42\1\0\1\3\6\0\10\3"+
    "\1\u0129\1\0\7\3\1\0\7\3\1\0\1\3\35\0"+
    "\1\u012a\35\0\1\3\1\42\1\0\1\3\6\0\10\3"+
    "\1\u012b\1\0\7\3\1\0\7\3\1\0\1\3\32\0"+
    "\1\u012c\40\0\1\3\1\42\1\0\1\3\6\0\5\3"+
    "\1\u012d\3\3\1\0\7\3\1\0\7\3\1\0\1\3"+
    "\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\17\1\1\11\1\1\3\11"+
    "\1\1\4\11\2\1\1\0\1\11\1\1\1\0\10\1"+
    "\1\0\2\1\1\11\1\0\14\1\1\0\3\1\1\11"+
    "\1\1\1\11\4\0\4\1\1\0\4\1\1\0\2\1"+
    "\1\0\7\1\1\0\5\1\1\0\3\1\3\0\5\1"+
    "\1\0\4\1\1\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\3\1\2\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\11\3\1"+
    "\1\0\1\1\1\0\3\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\11\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public void imprimir(String lqv)
{
    System.out.println("token leído\t"+lqv);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner_ccss(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos_ccss.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Carácter no válido\t"+yytext());
            }
          case 43: break;
          case 2: 
            { imprimir("idd"); return new Symbol(Simbolos_ccss.ide,yychar,yyline,yytext());
            }
          case 44: break;
          case 3: 
            { imprimir("numero"); return new Symbol(Simbolos_ccss.numero,yychar,yyline,yytext());
            }
          case 45: break;
          case 4: 
            { 
            }
          case 46: break;
          case 5: 
            { imprimir("/"); return new Symbol(Simbolos_ccss.div,yychar,yyline,yytext());
            }
          case 47: break;
          case 6: 
            { imprimir("*"); return new Symbol(Simbolos_ccss.por,yychar,yyline,yytext());
            }
          case 48: break;
          case 7: 
            { imprimir("-"); return new Symbol(Simbolos_ccss.menos,yychar,yyline,yytext());
            }
          case 49: break;
          case 8: 
            { imprimir("]"); return new Symbol(Simbolos_ccss.corchetec,yychar,yyline,yytext());
            }
          case 50: break;
          case 9: 
            { imprimir("["); return new Symbol(Simbolos_ccss.corcheteo,yychar,yyline,yytext());
            }
          case 51: break;
          case 10: 
            { imprimir("+"); return new Symbol(Simbolos_ccss.mas,yychar,yyline,yytext());
            }
          case 52: break;
          case 11: 
            { imprimir(";"); return new Symbol(Simbolos_ccss.pyc,yychar,yyline,yytext());
            }
          case 53: break;
          case 12: 
            { imprimir("("); return new Symbol(Simbolos_ccss.parento,yychar,yyline,yytext());
            }
          case 54: break;
          case 13: 
            { imprimir(")"); return new Symbol(Simbolos_ccss.parentc,yychar,yyline,yytext());
            }
          case 55: break;
          case 14: 
            { imprimir(","); return new Symbol(Simbolos_ccss.coma,yychar,yyline,yytext());
            }
          case 56: break;
          case 15: 
            { imprimir("cadena");return new Symbol(Simbolos_ccss.cadena,yychar,yyline,yytext());
            }
          case 57: break;
          case 16: 
            { imprimir("id"); return new Symbol(Simbolos_ccss.idd,yychar,yyline,yytext());
            }
          case 58: break;
          case 17: 
            { imprimir(":="); return new Symbol(Simbolos_ccss.asigna,yychar,yyline,yytext());
            }
          case 59: break;
          case 18: 
            { imprimir("true"); return new Symbol(Simbolos_ccss.truee,yychar,yyline,yytext());
            }
          case 60: break;
          case 19: 
            { imprimir("letra"); return new Symbol(Simbolos_ccss.letra,yychar,yyline,yytext());
            }
          case 61: break;
          case 20: 
            { imprimir("texto"); return new Symbol(Simbolos_ccss.texto,yychar,yyline,yytext());
            }
          case 62: break;
          case 21: 
            { imprimir("false"); return new Symbol(Simbolos_ccss.falsee,yychar,yyline,yytext());
            }
          case 63: break;
          case 22: 
            { imprimir("grupo"); return new Symbol(Simbolos_ccss.grupo,yychar,yyline,yytext());
            }
          case 64: break;
          case 23: 
            { imprimir("borde"); return new Symbol(Simbolos_ccss.borde,yychar,yyline,yytext());
            }
          case 65: break;
          case 24: 
            { imprimir("tamtex"); return new Symbol(Simbolos_ccss.tamtex,yychar,yyline,yytext());
            }
          case 66: break;
          case 25: 
            { imprimir("opaque"); return new Symbol(Simbolos_ccss.opaque,yychar,yyline,yytext());
            }
          case 67: break;
          case 26: 
            { imprimir("derecha"); return new Symbol(Simbolos_ccss.derecha,yychar,yyline,yytext());
            }
          case 68: break;
          case 27: 
            { imprimir("cursiva"); return new Symbol(Simbolos_ccss.cursiva,yychar,yyline,yytext());
            }
          case 69: break;
          case 28: 
            { imprimir("formato"); return new Symbol(Simbolos_ccss.formato,yychar,yyline,yytext());
            }
          case 70: break;
          case 29: 
            { imprimir("visible"); return new Symbol(Simbolos_ccss.visible,yychar,yyline,yytext());
            }
          case 71: break;
          case 30: 
            { imprimir("alienado"); return new Symbol(Simbolos_ccss.alineado,yychar,yyline,yytext());
            }
          case 72: break;
          case 31: 
            { imprimir("negrilla"); return new Symbol(Simbolos_ccss.negrilla,yychar,yyline,yytext());
            }
          case 73: break;
          case 32: 
            { imprimir("centrado"); return new Symbol(Simbolos_ccss.centrado,yychar,yyline,yytext());
            }
          case 74: break;
          case 33: 
            { imprimir("vertical"); return new Symbol(Simbolos_ccss.vertical,yychar,yyline,yytext());
            }
          case 75: break;
          case 34: 
            { imprimir("mayuscula"); return new Symbol(Simbolos_ccss.mayuscula,yychar,yyline,yytext());
            }
          case 76: break;
          case 35: 
            { imprimir("minuscula"); return new Symbol(Simbolos_ccss.minuscula,yychar,yyline,yytext());
            }
          case 77: break;
          case 36: 
            { imprimir("izquierda"); return new Symbol(Simbolos_ccss.izquierda,yychar,yyline,yytext());
            }
          case 78: break;
          case 37: 
            { imprimir("capital-t"); return new Symbol(Simbolos_ccss.capitalt,yychar,yyline,yytext());
            }
          case 79: break;
          case 38: 
            { imprimir("colortext"); return new Symbol(Simbolos_ccss.colortext,yychar,yyline,yytext());
            }
          case 80: break;
          case 39: 
            { imprimir("horizontal"); return new Symbol(Simbolos_ccss.horizontal,yychar,yyline,yytext());
            }
          case 81: break;
          case 40: 
            { imprimir("justificado"); return new Symbol(Simbolos_ccss.justificado,yychar,yyline,yytext());
            }
          case 82: break;
          case 41: 
            { imprimir("fondoelemento"); return new Symbol(Simbolos_ccss.fondoelemento,yychar,yyline,yytext());
            }
          case 83: break;
          case 42: 
            { imprimir("autoredimencion"); return new Symbol(Simbolos_ccss.autore,yychar,yyline,yytext());
            }
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
